// <auto-generated />
using System;
using ProcessusFormation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ProcessusFormation.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FormationProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("Valide");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FormationProject.Models.Formation.BesoinCollecteModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Activite")
                        .IsRequired();

                    b.Property<string>("Bareme_TFP")
                        .IsRequired();

                    b.Property<float>("Coùt_Totale_previsionnel");

                    b.Property<float>("Coùt_unitaire");

                    b.Property<DateTime>("Date_Debut");

                    b.Property<DateTime>("Date_Fin");

                    b.Property<string>("Duree")
                        .IsRequired();

                    b.Property<float>("Frais_de_deplacement");

                    b.Property<float>("Imputation");

                    b.Property<string>("Intitule_Formation")
                        .IsRequired();

                    b.Property<string>("Justification_du_besoin")
                        .IsRequired();

                    b.Property<float>("Montant_recuperer");

                    b.Property<int>("Nombre_de_jours");

                    b.Property<string>("Nombre_de_participants")
                        .IsRequired();

                    b.Property<string>("Organisme_de_formation")
                        .IsRequired();

                    b.Property<string>("Priorite")
                        .IsRequired();

                    b.Property<string>("type_de_formation")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BesoinCollecteModel");
                });

            modelBuilder.Entity("FormationProject.Models.Formation.BesoinFormationModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Activite")
                        .IsRequired();

                    b.Property<string>("Intitule_Formation")
                        .IsRequired();

                    b.Property<string>("Justification_du_besoin")
                        .IsRequired();

                    b.Property<string>("Nombre_de_participants")
                        .IsRequired();

                    b.Property<string>("Priorite")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BesoinFormations");
                });

            modelBuilder.Entity("FormationProject.Models.Formation.ParticipantFormation", b =>
                {
                    b.Property<string>("BesoinFormationId");

                    b.Property<string>("ParticipantId");

                    b.HasKey("BesoinFormationId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ParticipantFormation");
                });

            modelBuilder.Entity("FormationProject.Models.Formation.ParticipantModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProcessusFormation.Models.Compétence.CompetenceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domaine");

                    b.Property<string>("Label");

                    b.Property<string>("Niveau");

                    b.HasKey("Id");

                    b.ToTable("Competences");
                });

            modelBuilder.Entity("ProcessusFormation.Models.Evaluation.EvaluationChaud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Commentaire1");

                    b.Property<string>("Commentaire2");

                    b.Property<DateTime>("Date_DebutFormation");

                    b.Property<DateTime>("Date_Evaluation_Chaud");

                    b.Property<DateTime>("Date_FinFormation");

                    b.Property<string>("Direction");

                    b.Property<string>("Fonction");

                    b.Property<string>("Formateur");

                    b.Property<string>("Lieu");

                    b.Property<string>("Matricule");

                    b.Property<string>("Nom_Participant");

                    b.Property<string>("Organisme");

                    b.Property<string>("Prenom_Participant");

                    b.Property<int>("Score_Evaluation");

                    b.Property<int>("Score_Satisfaction");

                    b.Property<string>("Theme");

                    b.HasKey("Id");

                    b.ToTable("EvaluationChauds");
                });

            modelBuilder.Entity("ProcessusFormation.Models.Evaluation.EvaluationFroid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_Debut");

                    b.Property<DateTime>("Date_Evaluation_Froid");

                    b.Property<DateTime>("Date_Fin");

                    b.Property<string>("Direction");

                    b.Property<string>("Fonction");

                    b.Property<string>("Formateur");

                    b.Property<string>("Lieu");

                    b.Property<string>("Matricule");

                    b.Property<string>("Nom_Participant");

                    b.Property<string>("Organisme");

                    b.Property<string>("Prenom_Participant");

                    b.Property<string>("Theme");

                    b.Property<string>("question_A");

                    b.Property<string>("question_B");

                    b.Property<string>("question_C");

                    b.HasKey("Id");

                    b.ToTable("EvaluationFroids");
                });

            modelBuilder.Entity("ProcessusFormation.Models.Formation.SuiviFormationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activite");

                    b.Property<string>("Intitule_Formation")
                        .IsRequired();

                    b.Property<string>("Justification_du_besoin")
                        .IsRequired();

                    b.Property<string>("Nombre_Table");

                    b.Property<string>("Nombre_de_participants")
                        .IsRequired();

                    b.Property<string>("Organisme_de_formation")
                        .IsRequired();

                    b.Property<string>("Priorite")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SuiviFormations");
                });

            modelBuilder.Entity("FormationProject.Models.Formation.ParticipantFormation", b =>
                {
                    b.HasOne("FormationProject.Models.Formation.BesoinFormationModel", "BesoinFormation")
                        .WithMany("ParticipantFormations")
                        .HasForeignKey("BesoinFormationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormationProject.Models.Formation.ParticipantModel", "Participant")
                        .WithMany("ParticipantFormations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FormationProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FormationProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormationProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FormationProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
